generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Core User system with enhanced role-based access
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String    @unique
  passwordHash    String
  name            String
  surname         String
  address         String?
  phone           String?
  profileImageUrl String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)
  role            UserRole
  verifiedAt      DateTime?
  lastLogin       DateTime?
  
  // User profile based on role
  schoolAdmin     SchoolAdmin?
  principal       Principal?
  teacher         Teacher?
  parent          Parent?
  
  // Communication features
  sentMessages    Message[]        @relation("SentMessages")
  receivedMessages Message[]       @relation("ReceivedMessages")
  notifications   Notification[]
  deviceTokens    DeviceToken[]
  eventRsvps      EventRSVP[]
  
  // Chat participants
  chatParticipants ChatParticipant[]
}

enum UserRole {
  SUPER_ADMIN
  SCHOOL_ADMIN
  PRINCIPAL
  TEACHER
  PARENT
}

// Enhanced School model with registration and verification
model School {
  id              String    @id @default(uuid())
  name            String
  address         String
  city            String
  state           String
  country         String
  postalCode      String?
  phone           String?
  email           String?
  website         String?
  logoUrl         String?
  
  // School verification and registration
  isVerified      Boolean   @default(false)
  verifiedAt      DateTime?
  registrationStatus SchoolRegistrationStatus @default(PENDING)
  accreditationDocuments String[] // URLs to documents in Supabase
  schoolType      SchoolType?
  missionStatement String?
  virtualTourUrl  String?
  
  // Branding customization
  brandColors     Json?     // Store custom colors
  welcomeMessage  String?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)
  
  // School relationships
  schoolAdmin     SchoolAdmin?
  principals      Principal[]
  teachers        Teacher[]
  students        Student[]
  grades          Grade[]
  classes         Class[]
  subjects        Subject[]
  academicYears   AcademicYear[]
  academicCalendars AcademicCalendar[]
  announcements   Announcement[]
  events          Event[]
  feeStructures   FeeStructure[]
  payments        Payment[]
  assignments     Assignment[]
  examQuestions   ExamQuestion[]
  
  // School subscription/billing
  subscription    Subscription?
  
  // Multi-tenant isolation
  tenantId        String    @unique @default(uuid())
}

enum SchoolRegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum SchoolType {
  PRIMARY
  SECONDARY
  MONTESSORI
  INTERNATIONAL
  TECHNICAL
  UNIVERSITY
  OTHER
}

// School administrator (manages the school)
model SchoolAdmin {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [id], references: [id], onDelete: Cascade)
  
  schoolId        String    @unique
  school          School    @relation(fields: [schoolId], references: [id])
  
  // Admin permissions
  permissions     Json?     // Store specific permissions
}

// School principal
model Principal {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [id], references: [id], onDelete: Cascade)
  
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  
  // Principal-specific data
  qualifications  String?
  bio             String?
  
  // Approval status
  approval        Approval? @relation("PrincipalApproval")
  
  // Principal activities
  createdCalendars  AcademicCalendar[]
  approvals       Approval[] @relation("ApprovedBy")
  createdEvents   Event[]    @relation("CreatedBy")
}

// Enhanced Teacher model with approval workflow
model Teacher {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [id], references: [id], onDelete: Cascade)
  bloodType       String?
  sex             UserSex?
  birthday        DateTime?
  bio             String?
  qualifications  String?
  
  // School relationship
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  
  // Approval status and workflow
  approval        Approval? @relation("TeacherApproval")
  approvalStatus  ApprovalStatus @default(PENDING)
  
  // Teacher relationships
  subjects        Subject[]       @relation("TeacherSubjects")
  supervisedClasses Class[]       @relation("ClassSupervisor")
  lessons         Lesson[]
  attendance      Attendance[]    @relation("AttendanceRecorder")
  examQuestions   ExamQuestion[]
  assignments     Assignment[]
  uploadedResults Result[]        @relation("ResultUploader")
}

// Enhanced Parent model - removed school constraint to allow multi-school children
model Parent {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [id], references: [id], onDelete: Cascade)
  
  // Verification status
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt      DateTime?
  
  // Parent relationships - children can be in different schools
  children        Student[]
  payments        Payment[]
  feedbacks       ParentFeedback[]
}

// Enhanced Student model with parent-school relationship
model Student {
  id              String    @id @default(uuid())
  registrationNumber String  @unique
  name            String
  surname         String
  address         String?
  imageUrl        String?
  bloodType       String?
  sex             UserSex?
  birthday        DateTime?
  
  // School relationship
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  
  // Parent relationship
  parentId        String
  parent          Parent    @relation(fields: [parentId], references: [id])
  
  // Academic relationships
  classId         String?
  class           Class?    @relation(fields: [classId], references: [id])
  gradeId         String?
  grade           Grade?    @relation(fields: [gradeId], references: [id])
  
  // Student records
  attendances     Attendance[]
  results         Result[]
  assignmentSubmissions AssignmentSubmission[]
  
  // Verification status for parent-student relationship
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt      DateTime?
}

// Approval system for various entities
model Approval {
  id              String    @id @default(uuid())
  status          ApprovalStatus @default(PENDING)
  approvedAt      DateTime?
  rejectedAt      DateTime?
  comments        String?
  
  // Approver
  approvedById    String?
  approvedBy      Principal? @relation("ApprovedBy", fields: [approvedById], references: [id])
  
  // What's being approved
  teacher         Teacher?  @relation("TeacherApproval", fields: [teacherId], references: [id])
  teacherId       String?   @unique
  principal       Principal? @relation("PrincipalApproval", fields: [principalId], references: [id])
  principalId     String?   @unique
  examQuestion    ExamQuestion? @relation("ExamQuestionApproval", fields: [examQuestionId], references: [id])
  examQuestionId  String?   @unique
  result          Result?   @relation("ResultApproval", fields: [resultId], references: [id])
  resultId        String?   @unique
  assignment      Assignment? @relation("AssignmentApproval", fields: [assignmentId], references: [id])
  assignmentId    String?   @unique
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Grade levels
model Grade {
  id              String    @id @default(uuid())
  name            String
  level           Int
  description     String?
  
  // School relationship
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  
  // Grade relationships
  classes         Class[]
  students        Student[]
  
  @@unique([schoolId, level])
}

// Classes within grades
model Class {
  id              String    @id @default(uuid())
  name            String
  capacity        Int
  description     String?
  
  // School relationship
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  
  // Class relationships
  gradeId         String
  grade           Grade     @relation(fields: [gradeId], references: [id])
  supervisorId    String?
  supervisor      Teacher?  @relation("ClassSupervisor", fields: [supervisorId], references: [id])
  
  // Class content
  students        Student[]
  lessons         Lesson[]
  timetables      Timetable[]
  events          Event[]   @relation("ClassEvents")
  announcements   Announcement[] @relation("ClassAnnouncements")
  assignments     Assignment[]
  
  @@unique([schoolId, name])
}

// Academic subjects
model Subject {
  id              String    @id @default(uuid())
  name            String
  code            String?
  description     String?
  
  // School relationship
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  
  // Subject relationships
  teachers        Teacher[] @relation("TeacherSubjects")
  lessons         Lesson[]
  assignments     Assignment[]
  examQuestions   ExamQuestion[]
  
  @@unique([schoolId, name])
}

// Lessons
model Lesson {
  id              String    @id @default(uuid())
  name            String
  description     String?
  
  // Relationships
  subjectId       String
  subject         Subject   @relation(fields: [subjectId], references: [id])
  teacherId       String
  teacher         Teacher   @relation(fields: [teacherId], references: [id])
  classId         String
  class           Class     @relation(fields: [classId], references: [id])
  
  // Lesson content
  timetableSlots  TimetableSlot[]
  attendances     Attendance[]
}

// Academic years
model AcademicYear {
  id              String    @id @default(uuid())
  name            String
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean   @default(false)
  
  // School relationship
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  
  // Academic year content
  academicCalendars AcademicCalendar[]
  feeStructures   FeeStructure[]
  
  @@unique([schoolId, name])
}

// Academic calendar with document storage
model AcademicCalendar {
  id              String    @id @default(uuid())
  title           String
  description     String?
  documentUrls    String[]  // URLs to documents in Supabase storage
  
  // Relationships
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  academicYearId  String
  academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])
  createdById     String?
  createdBy       Principal? @relation(fields: [createdById], references: [id])
  
  // Calendar items
  calendarItems   CalendarItem[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Calendar items
model CalendarItem {
  id              String    @id @default(uuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  itemType        CalendarItemType
  isAllDay        Boolean   @default(false)
  
  // Relationships
  academicCalendarId String
  academicCalendar AcademicCalendar @relation(fields: [academicCalendarId], references: [id])
}

// Timetables
model Timetable {
  id              String    @id @default(uuid())
  name            String
  effectiveFrom   DateTime
  effectiveTo     DateTime?
  isActive        Boolean   @default(true)
  documentUrl     String?   // URL to timetable document
  
  // Relationships
  classId         String
  class           Class     @relation(fields: [classId], references: [id])
  
  // Timetable slots
  slots           TimetableSlot[]
}

// Timetable slots
model TimetableSlot {
  id              String    @id @default(uuid())
  day             Day
  startTime       DateTime
  endTime         DateTime
  
  // Relationships
  timetableId     String
  timetable       Timetable @relation(fields: [timetableId], references: [id])
  lessonId        String
  lesson          Lesson    @relation(fields: [lessonId], references: [id])
}

// Enhanced Assignments with file storage
model Assignment {
  id              String    @id @default(uuid())
  title           String
  description     String?
  instructions    String?
  documentUrls    String[]  // URLs to assignment documents in Supabase
  startDate       DateTime
  dueDate         DateTime
  maxScore        Int?
  
  // Relationships
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  subjectId       String
  subject         Subject   @relation(fields: [subjectId], references: [id])
  teacherId       String
  teacher         Teacher   @relation(fields: [teacherId], references: [id])
  classId         String?
  class           Class?    @relation(fields: [classId], references: [id])
  
  // Assignment type
  assignmentType  AssignmentType @default(INDIVIDUAL)
  
  // Approval
  approval        Approval? @relation("AssignmentApproval")
  
  // Submissions and results
  submissions     AssignmentSubmission[]
  results         Result[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Assignment submissions
model AssignmentSubmission {
  id              String    @id @default(uuid())
  submissionUrls  String[]  // URLs to submitted files
  submittedAt     DateTime  @default(now())
  comments        String?
  
  // Relationships
  assignmentId    String
  assignment      Assignment @relation(fields: [assignmentId], references: [id])
  studentId       String
  student         Student   @relation(fields: [studentId], references: [id])
  
  @@unique([assignmentId, studentId])
}

// Enhanced Exam Questions with approval workflow
model ExamQuestion {
  id              String    @id @default(uuid())
  title           String
  description     String?
  documentUrls    String[]  // URLs to question documents
  questionType    QuestionType @default(WRITTEN)
  duration        Int?      // Duration in minutes
  maxScore        Int?
  
  // Relationships
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  subjectId       String
  subject         Subject   @relation(fields: [subjectId], references: [id])
  teacherId       String
  teacher         Teacher   @relation(fields: [teacherId], references: [id])
  
  // Approval workflow
  approval        Approval? @relation("ExamQuestionApproval")
  version         Int       @default(1)
  
  // Exams
  exams           Exam[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Exam instances
model Exam {
  id              String    @id @default(uuid())
  title           String
  startTime       DateTime
  endTime         DateTime
  venue           String?
  instructions    String?
  
  // Relationships
  examQuestionId  String
  examQuestion    ExamQuestion @relation(fields: [examQuestionId], references: [id])
  
  // Results
  results         Result[]
  
  createdAt       DateTime  @default(now())
}

// Enhanced Results with document storage
model Result {
  id              String    @id @default(uuid())
  score           Int
  maxScore        Int?
  percentage      Float?
  grade           String?
  feedback        String?
  documentUrls    String[]  // URLs to result documents
  
  // Result type (exam or assignment)
  examId          String?
  exam            Exam?     @relation(fields: [examId], references: [id])
  assignmentId    String?
  assignment      Assignment? @relation(fields: [assignmentId], references: [id])
  
  // Relationships
  studentId       String
  student         Student   @relation(fields: [studentId], references: [id])
  
  // Upload and approval
  uploadedById    String
  uploadedBy      Teacher   @relation("ResultUploader", fields: [uploadedById], references: [id])
  uploadedAt      DateTime  @default(now())
  approval        Approval? @relation("ResultApproval")
  
  // Analytics
  classAverage    Float?
  rank            Int?
}

// Attendance tracking
model Attendance {
  id              String    @id @default(uuid())
  date            DateTime  @default(now())
  present         Boolean
  note            String?
  excuseDocumentUrl String? // URL to excuse document
  
  // Relationships
  studentId       String
  student         Student   @relation(fields: [studentId], references: [id])
  lessonId        String?
  lesson          Lesson?   @relation(fields: [lessonId], references: [id])
  recordedById    String
  recordedBy      Teacher   @relation("AttendanceRecorder", fields: [recordedById], references: [id])
  
  @@unique([studentId, lessonId, date])
}

// Enhanced Fee Structure
model FeeStructure {
  id              String    @id @default(uuid())
  name            String
  description     String?
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  dueDate         DateTime?
  gracePeriod     Int?      // Days
  lateFee         Decimal?  @db.Decimal(10, 2)
  feeType         FeeType   @default(TUITION)
  
  // Academic year
  academicYearId  String
  academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])
  
  // School relationship
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  
  // Payments
  payments        Payment[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Enhanced Payment system with transaction fees
model Payment {
  id              String    @id @default(uuid())
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  status          PaymentStatus
  paymentMethod   PaymentMethod
  transactionId   String?
  paymentDate     DateTime  @default(now())
  
  // Transaction fees (EduTrack's revenue)
  transactionFee  Decimal   @db.Decimal(10, 2) @default(0)
  feePercentage   Float     @default(0.025) // 2.5%
  
  // Relationships
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  parentId        String
  parent          Parent    @relation(fields: [parentId], references: [id])
  feeStructureId  String
  feeStructure    FeeStructure @relation(fields: [feeStructureId], references: [id])
  
  // Receipt
  receiptNumber   String?   @unique
  receiptUrl      String?   // URL to receipt document
  
  // Payment gateway data
  gatewayData     Json?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// School subscription for premium features
model Subscription {
  id              String    @id @default(uuid())
  plan            SubscriptionPlan
  startDate       DateTime  @default(now())
  endDate         DateTime?
  isActive        Boolean   @default(true)
  lastBillingDate DateTime  @default(now())
  nextBillingDate DateTime?
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  
  // Features
  features        Json?     // Store enabled features
  
  // School relationship
  schoolId        String    @unique
  school          School    @relation(fields: [schoolId], references: [id])
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Enhanced messaging system
model Chat {
  id              String    @id @default(uuid())
  name            String?   // For group chats
  chatType        ChatType  @default(DIRECT)
  isActive        Boolean   @default(true)
  
  // Chat metadata
  lastMessageAt   DateTime?
  
  // Participants and messages
  participants    ChatParticipant[]
  messages        Message[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ChatParticipant {
  id              String    @id @default(uuid())
  
  // Relationships
  chatId          String
  chat            Chat      @relation(fields: [chatId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Participant status
  joinedAt        DateTime  @default(now())
  leftAt          DateTime?
  isAdmin         Boolean   @default(false)
  lastReadAt      DateTime?
  
  @@unique([chatId, userId])
}

model Message {
  id              String    @id @default(uuid())
  content         String
  messageType     MessageType @default(TEXT)
  attachmentUrls  String[]  // URLs to attachments in Supabase
  
  // Relationships
  chatId          String
  chat            Chat      @relation(fields: [chatId], references: [id])
  senderId        String
  sender          User      @relation("SentMessages", fields: [senderId], references: [id])
  receiverId      String?   // For direct messages
  receiver        User?     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  // Message status
  sentAt          DateTime  @default(now())
  deliveredAt     DateTime?
  readAt          DateTime?
  isEdited        Boolean   @default(false)
  editedAt        DateTime?
  
  // Reply functionality
  replyToId       String?
  replyTo         Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
  replies         Message[] @relation("MessageReplies")
}

// Enhanced notifications
model Notification {
  id              String    @id @default(uuid())
  title           String
  content         String
  type            NotificationType
  priority        NotificationPriority @default(NORMAL)
  
  // Notification data
  data            Json?     // Additional data for the notification
  actionUrl       String?   // Deep link or URL
  imageUrl        String?
  
  // Relationships
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  // Status
  isRead          Boolean   @default(false)
  readAt          DateTime?
  sentAt          DateTime  @default(now())
  
  createdAt       DateTime  @default(now())
}

// Events and announcements
model Event {
  id              String    @id @default(uuid())
  title           String
  description     String
  location        String?
  startTime       DateTime
  endTime         DateTime
  eventType       EventType @default(GENERAL)
  
  // Event media
  imageUrls       String[]  // URLs to event images
  documentUrls    String[]  // URLs to event documents
  
  // Relationships
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  classId         String?
  class           Class?    @relation("ClassEvents", fields: [classId], references: [id])
  createdById     String?
  createdBy       Principal? @relation("CreatedBy", fields: [createdById], references: [id])
  
  // RSVP functionality
  rsvpRequired    Boolean   @default(false)
  rsvps           EventRSVP[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model EventRSVP {
  id              String    @id @default(uuid())
  response        RSVPResponse
  
  // Relationships
  eventId         String
  event           Event     @relation(fields: [eventId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  respondedAt     DateTime  @default(now())
  
  @@unique([eventId, userId])
}

model Announcement {
  id              String    @id @default(uuid())
  title           String
  content         String
  priority        AnnouncementPriority @default(NORMAL)
  
  // Announcement media
  imageUrls       String[]
  documentUrls    String[]
  
  // Relationships
  schoolId        String
  school          School    @relation(fields: [schoolId], references: [id])
  classId         String?
  class           Class?    @relation("ClassAnnouncements", fields: [classId], references: [id])
  
  // Targeting
  targetRoles     UserRole[]
  
  // Status
  isPublished     Boolean   @default(false)
  publishedAt     DateTime?
  expiresAt       DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Parent feedback system
model ParentFeedback {
  id              String    @id @default(uuid())
  rating          Int       // 1-5 stars
  feedback        String?
  feedbackType    FeedbackType
  isAnonymous     Boolean   @default(true)
  
  // Relationships
  parentId        String
  parent          Parent    @relation(fields: [parentId], references: [id])
  
  // What's being rated
  teacherId       String?
  schoolId        String?
  
  createdAt       DateTime  @default(now())
}

// Device tokens for push notifications
model DeviceToken {
  id              String    @id @default(uuid())
  token           String    @unique
  deviceType      DeviceType
  lastUsed        DateTime  @default(now())
  isActive        Boolean   @default(true)
  
  // User relationship
  userId          String
  user            User      @relation(fields: [userId], references: [id])
}

// File storage tracking
model FileStorage {
  id              String    @id @default(uuid())
  fileName        String
  originalName    String
  fileSize        Int
  mimeType        String
  fileUrl         String    // Supabase storage URL
  bucketName      String
  
  // File metadata
  uploadedById    String
  schoolId        String?   // For multi-tenant file organization
  
  // File categorization
  fileCategory    FileCategory
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Enums
enum UserSex {
  MALE
  FEMALE
  OTHER
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum CalendarItemType {
  HOLIDAY
  EXAM_PERIOD
  TERM_START
  TERM_END
  SPECIAL_EVENT
  SPORTS_DAY
  PARENT_TEACHER_MEETING
  OTHER
}

enum AssignmentType {
  INDIVIDUAL
  GROUP
  CLASS_WIDE
}

enum QuestionType {
  WRITTEN
  MULTIPLE_CHOICE
  PRACTICAL
  ORAL
  PROJECT
}

enum FeeType {
  TUITION
  REGISTRATION
  EXAMINATION
  LIBRARY
  LABORATORY
  SPORTS
  TRANSPORT
  UNIFORM
  BOOKS
  EXTRACURRICULAR
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  PARTIALLY_PAID
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  MOBILE_MONEY
  PAYPAL
  STRIPE
  FLUTTERWAVE
  PAYSTACK
  CASH
  OTHER
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum ChatType {
  DIRECT
  GROUP
  ANNOUNCEMENT
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  LOCATION
}

enum NotificationType {
  ATTENDANCE
  ASSIGNMENT
  EXAM
  RESULT
  PAYMENT
  ANNOUNCEMENT
  EVENT
  MESSAGE
  APPROVAL
  REMINDER
  GENERAL
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum EventType {
  ACADEMIC
  SPORTS
  CULTURAL
  MEETING
  EXAMINATION
  HOLIDAY
  GENERAL
}

enum RSVPResponse {
  ATTENDING
  NOT_ATTENDING
  MAYBE
}

enum AnnouncementPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum FeedbackType {
  TEACHER_RATING
  SCHOOL_RATING
  SERVICE_FEEDBACK
  SUGGESTION
  COMPLAINT
}

enum DeviceType {
  IOS
  ANDROID
  WEB
}

enum FileCategory {
  PROFILE_IMAGE
  SCHOOL_LOGO
  DOCUMENT
  ASSIGNMENT
  EXAM_QUESTION
  RESULT
  TIMETABLE
  CALENDAR
  ANNOUNCEMENT
  EVENT_IMAGE
  CHAT_ATTACHMENT
  RECEIPT
  ACCREDITATION
  OTHER
}
