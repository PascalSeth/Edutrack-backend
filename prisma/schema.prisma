generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
directUrl = env("DIRECT_URL")
}

// Core User system with enhanced role-based access
model User {
id              String    @id @default(uuid())
email           String    @unique
username        String    @unique
passwordHash    String
name            String
surname         String
address         String?
phone           String?
profileImageUrl String?
createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
isActive        Boolean   @default(true)
role            UserRole
verifiedAt      DateTime?
lastLogin       DateTime?

// User profile based on role
schoolAdmin     SchoolAdmin?
principal       Principal?
teacher         Teacher?
parent          Parent?
staff           Staff? // NEW: Generic staff profile

// NEW: Custom role for school-defined roles
customRoleId    String?
customRole      CustomRole? @relation(fields: [customRoleId], references: [id])

// Communication features
sentMessages    Message[]        @relation("SentMessages")
receivedMessages Message[]       @relation("ReceivedMessages")
notifications   Notification[]
deviceTokens    DeviceToken[]
eventRsvps      EventRSVP[]

// Chat participants
chatParticipants ChatParticipant[]

// NEW: Assigned inventory items and maintenance records
assignedInventoryItems InventoryItem[] @relation("AssignedToUser")
maintenanceRecords     MaintenanceRecord[] @relation("PerformedBy")
}

enum UserRole {
SUPER_ADMIN
SCHOOL_ADMIN
PRINCIPAL
TEACHER
PARENT
}

// Enhanced School model with registration and verification
model School {
id              String    @id @default(uuid())
name            String
address         String
city            String
state           String
country         String
postalCode      String?
phone           String?
email           String?
website         String?
logoUrl         String?

// School verification and registration
isVerified      Boolean   @default(false)
verifiedAt      DateTime?
registrationStatus SchoolRegistrationStatus @default(PENDING)
accreditationDocuments String[] // URLs to documents in Supabase
schoolType      SchoolType?
missionStatement String?
virtualTourUrl  String?

// Branding customization
brandColors     Json?     // Store custom colors
welcomeMessage  String?

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
isActive        Boolean   @default(true)

// School relationships
schoolAdmin     SchoolAdmin?
principals      Principal[]
teachers        Teacher[]
students        Student[]
grades          Grade[]
classes         Class[]
subjects        Subject[]
academicYears   AcademicYear[]
academicCalendars AcademicCalendar[]
announcements   Announcement[]
events          Event[]
feeStructures   FeeStructure[]
payments        Payment[]
assignments     Assignment[]
examQuestions   ExamQuestion[]

// School subscription/billing
subscription    Subscription?

materialCategories MaterialCategory[]
materials       Material[]
materialCarts   MaterialCart[]
materialOrders  MaterialOrder[]
paymentAccount  SchoolPaymentAccount?

// Academic Management
rooms           Room[]
timetables      Timetable[]
exams           Exam[]
gradeScales     GradeScale[]
curriculums     Curriculum[]
terms           Term[]
holidays        Holiday[]
reportCards     ReportCard[]

// Multi-tenant isolation
tenantId        String    @unique @default(uuid())

// NEW: Organizational Management
departments     Department[]
positions       Position[]
staff           Staff[]
campuses        Campus[]
customRoles     CustomRole[]

// NEW: Inventory Management
assetCategories AssetCategory[]
inventoryItems  InventoryItem[]
}

enum SchoolRegistrationStatus {
PENDING
APPROVED
REJECTED
UNDER_REVIEW
}

enum SchoolType {
PRIMARY
SECONDARY
MONTESSORI
INTERNATIONAL
TECHNICAL
UNIVERSITY
OTHER
}

// School administrator (manages the school)
model SchoolAdmin {
id              String    @id @default(uuid())
user            User      @relation(fields: [id], references: [id], onDelete: Cascade)

schoolId        String    @unique
school          School    @relation(fields: [schoolId], references: [id])

// Admin permissions
permissions     Json?     // Store specific permissions
}

// School principal
model Principal {
id              String    @id @default(uuid())
user            User      @relation(fields: [id], references: [id], onDelete: Cascade)

schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Principal-specific data
qualifications  String?
bio             String?

// Approval status
approval        Approval? @relation("PrincipalApproval")

// Principal activities
createdCalendars  AcademicCalendar[]
approvals       Approval[] @relation("ApprovedBy")
createdEvents   Event[]    @relation("CreatedBy")
createdExams    Exam[]     @relation("ExamCreator")
approvedReportCards ReportCard[] @relation("ReportCardApprover")

// NEW: Campus assignment
campusId        String?
campus          Campus?   @relation("PrincipalCampus", fields: [campusId], references: [id])

Event Event[]
}

// Enhanced Teacher model with approval workflow
model Teacher {
id              String    @id @default(uuid())
user            User      @relation(fields: [id], references: [id], onDelete: Cascade)
bloodType       String?
sex             UserSex?
birthday        DateTime?
bio             String?
qualifications  String?

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Approval status and workflow
approval        Approval? @relation("TeacherApproval")
approvalStatus  ApprovalStatus @default(PENDING)

// Teacher relationships
subjects        Subject[]       @relation("TeacherSubjects")
supervisedClasses Class[]       @relation("ClassSupervisor")
lessons         Lesson[]
attendance      Attendance[]    @relation("AttendanceRecorder")
examQuestions   ExamQuestion[]
assignments     Assignment[]
uploadedResults Result[]        @relation("ResultUploader")

// Academic Management
timetableSlots  TimetableSlot[] @relation("TeacherSlots")
examSessions    ExamSession[]   @relation("ExamInvigilator")
gradedResults   Result[]        @relation("ResultGrader")

// NEW: Campus assignment
campusId        String?
campus          Campus?   @relation("TeacherCampus", fields: [campusId], references: [id])
}

// Enhanced Parent model - removed school constraint to allow multi-school children
model Parent {
id              String    @id @default(uuid())
user            User      @relation(fields: [id], references: [id], onDelete: Cascade)
birthday        DateTime?

// Verification status
verificationStatus VerificationStatus @default(PENDING)
verifiedAt      DateTime?

// Parent relationships - children can be in different schools
children        Student[] // Legacy - to be removed after migration
studentParents  StudentParent[]
payments        Payment[]
feedbacks       ParentFeedback[]

materialCarts   MaterialCart[]
materialOrders  MaterialOrder[]

// Academic Management
reportCardViews ReportCardView[]
}

// Enhanced Student model with parent-school relationship
model Student {
id              String    @id @default(uuid())
registrationNumber String  @unique
name            String
surname         String
address         String?
imageUrl        String?
bloodType       String?
sex             UserSex?
birthday        DateTime?

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Parent relationship
parentId        String
parent          Parent    @relation(fields: [parentId], references: [id])

// Academic relationships
classId         String?
class           Class?    @relation(fields: [classId], references: [id])
gradeId         String?
grade           Grade?    @relation(fields: [gradeId], references: [id])

// Student records
attendances     Attendance[]
results         Result[]
assignmentSubmissions AssignmentSubmission[]

// Academic Management
examSessions    ExamSession[]
reportCards     ReportCard[]
curriculumProgress CurriculumProgress[]

// Verification status for parent-student relationship
verificationStatus VerificationStatus @default(PENDING)
verifiedAt      DateTime?

// NEW: Campus assignment
campusId        String?
campus          Campus?   @relation("StudentCampus", fields: [campusId], references: [id])

// Parent relationships (many-to-many with relationship type)
parents         StudentParent[]
}

// Student-Parent Relationship (many-to-many with relationship type)
model StudentParent {
id              String    @id @default(uuid())

// Relationships
studentId       String
student         Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
parentId        String
parent          Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)

// Relationship type
relationship    ParentRelationship

// Verification status for this specific parent-student relationship
verificationStatus VerificationStatus @default(PENDING)
verifiedAt      DateTime?
isPrimary       Boolean   @default(false) // Primary contact parent

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([studentId, parentId])
}

// ACADEMIC MANAGEMENT MODELS

// Room/Venue Management
model Room {
id              String    @id @default(uuid())
name            String
code            String?
capacity        Int
roomType        RoomType  @default(CLASSROOM)
floor           String?
building        String?
facilities      String[]  // Array of facilities like "Projector", "AC", etc.
isActive        Boolean   @default(true)

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// NEW: Campus relationship
campusId        String?
campus          Campus?   @relation(fields: [campusId], references: [id])

// Room usage
timetableSlots  TimetableSlot[]
examSessions    ExamSession[]
events          Event[]   @relation("EventVenue")
inventoryItems  InventoryItem[] @relation("InventoryLocationRoom") // NEW: Inventory items in this room

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([schoolId, code])
}

// Enhanced Timetable Management
model Timetable {
id              String    @id @default(uuid())
name            String
academicYearId  String
termId          String?
effectiveFrom   DateTime
effectiveTo     DateTime?
isActive        Boolean   @default(true)
documentUrl     String?   // URL to timetable document

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])
term            Term?     @relation(fields: [termId], references: [id])

// Timetable slots
slots           TimetableSlot[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

Class Class[]
}

// Enhanced Timetable slots with room assignment
model TimetableSlot {
id              String    @id @default(uuid())
day             Day
startTime       String    // Format: "HH:MM"
endTime         String    // Format: "HH:MM"
period          Int       // Period number (1, 2, 3, etc.)

// Relationships
timetableId     String
timetable       Timetable @relation(fields: [timetableId], references: [id])
lessonId        String
lesson          Lesson    @relation(fields: [lessonId], references: [id])
roomId          String?
room            Room?     @relation(fields: [roomId], references: [id])
teacherId       String
teacher         Teacher   @relation("TeacherSlots", fields: [teacherId], references: [id])

// Slot status
isActive        Boolean   @default(true)
notes           String?

@@unique([timetableId, day, period])
}

// Term Management
model Term {
id              String    @id @default(uuid())
name            String    // "First Term", "Second Term", etc.
startDate       DateTime
endDate         DateTime
isActive        Boolean   @default(false)

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
academicYearId  String
academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])

// Term content
timetables      Timetable[]
exams           Exam[]
reportCards     ReportCard[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([schoolId, academicYearId, name])
}

// Holiday Management
model Holiday {
id              String    @id @default(uuid())
name            String
description     String?
startDate       DateTime
endDate         DateTime
holidayType     HolidayType @default(PUBLIC)
isRecurring     Boolean   @default(false)

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Enhanced Exam Management
model Exam {
id              String    @id @default(uuid())
title           String
description     String?
examType        ExamType  @default(WRITTEN)
totalMarks      Int
passingMarks    Int
duration        Int       // Duration in minutes
instructions    String?

// Scheduling
startDate       DateTime
endDate         DateTime

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
subjectId       String
subject         Subject   @relation(fields: [subjectId], references: [id])
gradeId         String?
grade           Grade?    @relation(fields: [gradeId], references: [id])
classId         String?
class           Class?    @relation(fields: [classId], references: [id])
termId          String?
term            Term?     @relation(fields: [termId], references: [id])
createdById     String
createdBy       Principal @relation("ExamCreator", fields: [createdById], references: [id])

// Exam content
examQuestions   ExamQuestion[]
examSessions    ExamSession[]
results         Result[]

// Status
status          ExamStatus @default(DRAFT)
publishedAt     DateTime?

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Exam Sessions (individual exam sittings)
model ExamSession {
id              String    @id @default(uuid())
sessionDate     DateTime
startTime       String    // Format: "HH:MM"
endTime         String    // Format: "HH:MM"

// Relationships
examId          String
exam            Exam      @relation(fields: [examId], references: [id])
roomId          String
room            Room      @relation(fields: [roomId], references: [id])
invigilatorId   String
invigilator     Teacher   @relation("ExamInvigilator", fields: [invigilatorId], references: [id])

// Students in this session
students        Student[]

// Session status
status          ExamSessionStatus @default(SCHEDULED)
actualStartTime DateTime?
actualEndTime   DateTime?
notes           String?

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Grade Scale Management
model GradeScale {
id              String    @id @default(uuid())
name            String    // "Primary Scale", "Secondary Scale"
description     String?
isDefault       Boolean   @default(false)

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Grade boundaries
gradeBoundaries GradeBoundary[]

// Usage
subjects        Subject[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([schoolId, name])
}

// Grade Boundaries (A, B, C, etc.)
model GradeBoundary {
id              String    @id @default(uuid())
grade           String    // "A", "B", "C", "D", "F"
minPercentage   Float
maxPercentage   Float
gradePoint      Float     // For GPA calculation
description     String?   // "Excellent", "Good", etc.

// Relationships
gradeScaleId    String
gradeScale      GradeScale @relation(fields: [gradeScaleId], references: [id])

@@unique([gradeScaleId, grade])
}

// Curriculum Management
model Curriculum {
id              String    @id @default(uuid())
name            String
description     String?
version         String    @default("1.0")
isActive        Boolean   @default(true)

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Curriculum content
curriculumSubjects CurriculumSubject[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([schoolId, name, version])
}

// Curriculum Subjects
model CurriculumSubject {
id              String    @id @default(uuid())

// Relationships
curriculumId    String
curriculum      Curriculum @relation(fields: [curriculumId], references: [id])
subjectId       String
subject         Subject   @relation(fields: [subjectId], references: [id])
gradeId         String
grade           Grade     @relation(fields: [gradeId], references: [id])

// Subject details in curriculum
hoursPerWeek    Int?
isCore          Boolean   @default(true)
prerequisites   String[]  // Array of prerequisite subject IDs

// Learning objectives
learningObjectives LearningObjective[]

@@unique([curriculumId, subjectId, gradeId])
}

// Learning Objectives
model LearningObjective {
id              String    @id @default(uuid())
title           String
description     String
objectiveType   ObjectiveType @default(KNOWLEDGE)
bloomsLevel     BloomsLevel @default(REMEMBER)

// Relationships
curriculumSubjectId String
curriculumSubject CurriculumSubject @relation(fields: [curriculumSubjectId], references: [id])

// Progress tracking
studentProgress CurriculumProgress[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Student Curriculum Progress
model CurriculumProgress {
id              String    @id @default(uuid())

// Relationships
studentId       String
student         Student   @relation(fields: [studentId], references: [id])
learningObjectiveId String
learningObjective LearningObjective @relation(fields: [learningObjectiveId], references: [id])

// Progress details
status          ProgressStatus @default(NOT_STARTED)
completedAt     DateTime?
masteryLevel    MasteryLevel @default(BEGINNER)
notes           String?

// Assessment
assessmentScore Float?
assessmentDate  DateTime?

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([studentId, learningObjectiveId])
}

// Report Card Management
model ReportCard {
id              String    @id @default(uuid())
title           String
academicYearId  String
termId          String?

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
studentId       String
student         Student   @relation(fields: [studentId], references: [id])
academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])
term            Term?     @relation(fields: [termId], references: [id])

// Report card data
overallGrade    String?
overallGPA      Float?
totalMarks      Int?
obtainedMarks   Int?
percentage      Float?
position        Int?      // Class position
totalStudents   Int?      // Total students in class

// Comments
teacherComments String?
principalComments String?

// Status
status          ReportCardStatus @default(DRAFT)
generatedAt     DateTime?
approvedAt      DateTime?
approvedById    String?
approvedBy      Principal? @relation("ReportCardApprover", fields: [approvedById], references: [id])

// Report card subjects
subjectReports  SubjectReport[]

// Views (for parents)
views           ReportCardView[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([studentId, academicYearId, termId])
}

// Subject Reports in Report Card
model SubjectReport {
id              String    @id @default(uuid())

// Relationships
reportCardId    String
reportCard      ReportCard @relation(fields: [reportCardId], references: [id])
subjectId       String
subject         Subject   @relation(fields: [subjectId], references: [id])

// Marks
totalMarks      Int
obtainedMarks   Int
percentage      Float
grade           String
gradePoint      Float?

// Position
position        Int?
totalStudents   Int?

// Comments
teacherComments String?

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([reportCardId, subjectId])
}

// Report Card Views (tracking when parents view report cards)
model ReportCardView {
id              String    @id @default(uuid())

// Relationships
reportCardId    String
reportCard      ReportCard @relation(fields: [reportCardId], references: [id])
parentId        String
parent          Parent    @relation(fields: [parentId], references: [id])

// View details
viewedAt        DateTime  @default(now())
ipAddress       String?
userAgent       String?

@@unique([reportCardId, parentId])
}

// Approval system for various entities
model Approval {
id              String    @id @default(uuid())
status          ApprovalStatus @default(PENDING)
approvedAt      DateTime?
rejectedAt      DateTime?
comments        String?

// Approver
approvedById    String?
approvedBy      Principal? @relation("ApprovedBy", fields: [approvedById], references: [id])

// What's being approved
teacher         Teacher?  @relation("TeacherApproval", fields: [teacherId], references: [id])
teacherId       String?   @unique
principal       Principal? @relation("PrincipalApproval", fields: [principalId], references: [id])
principalId     String?   @unique
examQuestion    ExamQuestion? @relation("ExamQuestionApproval", fields: [examQuestionId], references: [id])
examQuestionId  String?   @unique
result          Result?   @relation("ResultApproval", fields: [resultId], references: [id])
resultId        String?   @unique
assignment      Assignment? @relation("AssignmentApproval", fields: [assignmentId], references: [id])
assignmentId    String?   @unique

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Grade levels
model Grade {
id              String    @id @default(uuid())
name            String
level           Int
description     String?

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Grade relationships
classes         Class[]
students        Student[]
exams           Exam[]
curriculumSubjects CurriculumSubject[]

@@unique([schoolId, level])
}

// Classes within grades
model Class {
id              String    @id @default(uuid())
name            String
capacity        Int
description     String?

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Class relationships
gradeId         String
grade           Grade     @relation(fields: [gradeId], references: [id])
supervisorId    String?
supervisor      Teacher?  @relation("ClassSupervisor", fields: [supervisorId], references: [id])

// NEW: Campus assignment
campusId        String?
campus          Campus?   @relation("ClassCampus", fields: [campusId], references: [id])

// Class content
students        Student[]
lessons         Lesson[]
timetables      Timetable[]
events          Event[]   @relation("ClassEvents")
announcements   Announcement[] @relation("ClassAnnouncements")
assignments     Assignment[]
exams           Exam[]

@@unique([schoolId, name])
}

// Academic subjects
model Subject {
id              String    @id @default(uuid())
name            String
code            String?
description     String?

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Grading
gradeScaleId    String?
gradeScale      GradeScale? @relation(fields: [gradeScaleId], references: [id])

// Subject relationships
teachers        Teacher[] @relation("TeacherSubjects")
lessons         Lesson[]
assignments     Assignment[]
examQuestions   ExamQuestion[]
exams           Exam[]
curriculumSubjects CurriculumSubject[]
subjectReports  SubjectReport[]

@@unique([schoolId, name])
}

// Lessons
model Lesson {
id              String    @id @default(uuid())
name            String
description     String?

// Relationships
subjectId       String
subject         Subject   @relation(fields: [subjectId], references: [id])
teacherId       String
teacher         Teacher   @relation(fields: [teacherId], references: [id])
classId         String
class           Class     @relation(fields: [classId], references: [id])

// Lesson content
timetableSlots  TimetableSlot[]
attendances     Attendance[]
}

// Academic years
model AcademicYear {
id              String    @id @default(uuid())
name            String
startDate       DateTime
endDate         DateTime
isActive        Boolean   @default(false)

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Academic year content
academicCalendars AcademicCalendar[]
feeStructures   FeeStructure[]
terms           Term[]
timetables      Timetable[]
reportCards     ReportCard[]

@@unique([schoolId, name])
}

// Academic calendar with document storage
model AcademicCalendar {
id              String    @id @default(uuid())
title           String
description     String?
documentUrls    String[]  // URLs to documents in Supabase storage

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
academicYearId  String
academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])
createdById     String?
createdBy       Principal? @relation(fields: [createdById], references: [id])

// Calendar items
calendarItems   CalendarItem[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Calendar items
model CalendarItem {
id              String    @id @default(uuid())
title           String
description     String?
startDate       DateTime
endDate         DateTime
itemType        CalendarItemType
isAllDay        Boolean   @default(false)

// Relationships
academicCalendarId String
academicCalendar AcademicCalendar @relation(fields: [academicCalendarId], references: [id])
}

// Enhanced Assignments with file storage
model Assignment {
id              String    @id @default(uuid())
title           String
description     String?
instructions    String?
documentUrls    String[]  // URLs to assignment documents in Supabase
startDate       DateTime
dueDate         DateTime
maxScore        Int?

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
subjectId       String
subject         Subject   @relation(fields: [subjectId], references: [id])
teacherId       String
teacher         Teacher   @relation(fields: [teacherId], references: [id])
classId         String?
class           Class?    @relation(fields: [classId], references: [id])

// Assignment type
assignmentType  AssignmentType @default(INDIVIDUAL)

// Approval
approval        Approval? @relation("AssignmentApproval")

// Submissions and results
submissions     AssignmentSubmission[]
results         Result[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Assignment submissions
model AssignmentSubmission {
id              String    @id @default(uuid())
submissionUrls  String[]  // URLs to submitted files
submittedAt     DateTime  @default(now())
comments        String?

// Relationships
assignmentId    String
assignment      Assignment @relation(fields: [assignmentId], references: [id])
studentId       String
student         Student   @relation(fields: [studentId], references: [id])

@@unique([assignmentId, studentId])
}

// Enhanced Exam Questions with approval workflow
model ExamQuestion {
id              String    @id @default(uuid())
title           String
description     String?
documentUrls    String[]  // URLs to question documents
questionType    QuestionType @default(WRITTEN)
duration        Int?      // Duration in minutes
maxScore        Int?

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
subjectId       String
subject         Subject   @relation(fields: [subjectId], references: [id])
teacherId       String
teacher         Teacher   @relation(fields: [teacherId], references: [id])

// Approval workflow
approval        Approval? @relation("ExamQuestionApproval")
version         Int       @default(1)

// Exams
exams           Exam[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Enhanced Results with document storage
model Result {
id              String    @id @default(uuid())
score           Int
maxScore        Int?
percentage      Float?
grade           String?
gradePoint      Float?
feedback        String?
documentUrls    String[]  // URLs to result documents

// Result type (exam or assignment)
examId          String?
exam            Exam?     @relation(fields: [examId], references: [id])
assignmentId    String?
assignment      Assignment? @relation(fields: [assignmentId], references: [id])

// Relationships
studentId       String
student         Student   @relation(fields: [studentId], references: [id])

// Upload and approval
uploadedById    String
uploadedBy      Teacher   @relation("ResultUploader", fields: [uploadedById], references: [id])
uploadedAt      DateTime  @default(now())
gradedById      String?
gradedBy        Teacher?  @relation("ResultGrader", fields: [gradedById], references: [id])
gradedAt        DateTime?
approval        Approval? @relation("ResultApproval")

// Analytics
classAverage    Float?
rank            Int?
}

// Attendance tracking
model Attendance {
id              String    @id @default(uuid())
date            DateTime  @default(now())
present         Boolean
note            String?
excuseDocumentUrl String? // URL to excuse document

// Relationships
studentId       String
student         Student   @relation(fields: [studentId], references: [id])
lessonId        String?
lesson          Lesson?   @relation(fields: [lessonId], references: [id])
recordedById    String
recordedBy      Teacher   @relation("AttendanceRecorder", fields: [recordedById], references: [id])

@@unique([studentId, lessonId, date])
}

// Enhanced Fee Structure
model FeeStructure {
id              String    @id @default(uuid())
name            String
description     String?
amount          Decimal   @db.Decimal(10, 2)
currency        String    @default("USD")
dueDate         DateTime?
gracePeriod     Int?      // Days
lateFee         Decimal?  @db.Decimal(10, 2)
feeType         FeeType   @default(TUITION)

// Academic year
academicYearId  String
academicYear    AcademicYear @relation(fields: [academicYearId], references: [id])

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Payments
payments        Payment[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Enhanced Payment system with transaction fees
model Payment {
id              String    @id @default(uuid())
amount          Decimal   @db.Decimal(10, 2)
currency        String    @default("USD")
status          PaymentStatus
paymentMethod   PaymentMethod
transactionId   String?
paymentDate     DateTime  @default(now())

// Transaction fees (EduTrack's revenue)
transactionFee  Decimal   @db.Decimal(10, 2) @default(0)
feePercentage   Float     @default(0.025) // 2.5%

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
parentId        String
parent          Parent    @relation(fields: [parentId], references: [id])
feeStructureId  String
feeStructure    FeeStructure @relation(fields: [feeStructureId], references: [id])

// Receipt
receiptNumber   String?   @unique
receiptUrl      String?   // URL to receipt document

// Payment gateway data
gatewayData     Json?

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// School subscription for premium features
model Subscription {
id              String    @id @default(uuid())
plan            SubscriptionPlan
startDate       DateTime  @default(now())
endDate         DateTime?
isActive        Boolean   @default(true)
lastBillingDate DateTime  @default(now())
nextBillingDate DateTime?
amount          Decimal   @db.Decimal(10, 2)
currency        String    @default("USD")

// Features
features        Json?     // Store enabled features

// School relationship
schoolId        String    @unique
school          School    @relation(fields: [schoolId], references: [id])

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Enhanced messaging system
model Chat {
id              String    @id @default(uuid())
name            String?   // For group chats
chatType        ChatType  @default(DIRECT)
isActive        Boolean   @default(true)

// Chat metadata
lastMessageAt   DateTime?

// Participants and messages
participants    ChatParticipant[]
messages        Message[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

model ChatParticipant {
id              String    @id @default(uuid())

// Relationships
chatId          String
chat            Chat      @relation(fields: [chatId], references: [id])
userId          String
user            User      @relation(fields: [userId], references: [id])

// Participant status
joinedAt        DateTime  @default(now())
leftAt          DateTime?
isAdmin         Boolean   @default(false)
lastReadAt      DateTime?

@@unique([chatId, userId])
}

model Message {
id              String    @id @default(uuid())
content         String
messageType     MessageType @default(TEXT)
attachmentUrls  String[]  // URLs to attachments in Supabase

// Relationships
chatId          String
chat            Chat      @relation(fields: [chatId], references: [id])
senderId        String
sender          User      @relation("SentMessages", fields: [senderId], references: [id])
receiverId      String?   // For direct messages
receiver        User?     @relation("ReceivedMessages", fields: [receiverId], references: [id])

// Message status
sentAt          DateTime  @default(now())
deliveredAt     DateTime?
readAt          DateTime?
isEdited        Boolean   @default(false)
editedAt        DateTime?

// Reply functionality
replyToId       String?
replyTo         Message?  @relation("MessageReplies", fields: [replyToId], references: [id])
replies         Message[] @relation("MessageReplies")
}

// Enhanced notifications
model Notification {
id              String    @id @default(uuid())
title           String
content         String
type            NotificationType
priority        NotificationPriority @default(NORMAL)

// Notification data
data            Json?     // Additional data for the notification
actionUrl       String?   // Deep link or URL
imageUrl        String?

// Relationships
userId          String
user            User      @relation(fields: [userId], references: [id])

// Status
isRead          Boolean   @default(false)
readAt          DateTime?
sentAt          DateTime  @default(now())

createdAt       DateTime  @default(now())
}

// Events and announcements
model Event {
id              String    @id @default(uuid())
title           String
description     String
location        String?
startTime       DateTime
endTime         DateTime
eventType       EventType @default(GENERAL)

// Event media
imageUrls       String[]  // URLs to event images
documentUrls    String[]  // URLs to event documents

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
classId         String?
class           Class?    @relation("ClassEvents", fields: [classId], references: [id])
roomId          String?
room            Room?     @relation("EventVenue", fields: [roomId], references: [id])
createdById     String?
createdBy       Principal? @relation(fields: [createdById], references: [id])

// NEW: Campus relationship
campusId        String?
campus          Campus?   @relation("EventCampus", fields: [campusId], references: [id])

// RSVP functionality
rsvpRequired    Boolean   @default(false)
rsvps           EventRSVP[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

Principal Principal[] @relation("CreatedBy")
}

model EventRSVP {
id              String    @id @default(uuid())
response        RSVPResponse

// Relationships
eventId         String
event           Event     @relation(fields: [eventId], references: [id])
userId          String
user            User      @relation(fields: [userId], references: [id])

respondedAt     DateTime  @default(now())

@@unique([eventId, userId])
}

model Announcement {
id              String    @id @default(uuid())
title           String
content         String
priority        AnnouncementPriority @default(NORMAL)

// Announcement media
imageUrls       String[]
documentUrls    String[]

// Relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
classId         String?
class           Class?    @relation("ClassAnnouncements", fields: [classId], references: [id])

// Targeting
targetRoles     UserRole[]

// Status
isPublished     Boolean   @default(false)
publishedAt     DateTime?
expiresAt       DateTime?

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// Parent feedback system
model ParentFeedback {
id              String    @id @default(uuid())
rating          Int       // 1-5 stars
feedback        String?
feedbackType    FeedbackType
isAnonymous     Boolean   @default(true)

// Relationships
parentId        String
parent          Parent    @relation(fields: [parentId], references: [id])

// What's being rated
teacherId       String?
schoolId        String?

createdAt       DateTime  @default(now())
}

// Device tokens for push notifications
model DeviceToken {
id              String    @id @default(uuid())
token           String    @unique
deviceType      DeviceType
lastUsed        DateTime  @default(now())
isActive        Boolean   @default(true)

// User relationship
userId          String
user            User      @relation(fields: [userId], references: [id])
}

// File storage tracking
model FileStorage {
id              String    @id @default(uuid())
fileName        String
originalName    String
fileSize        Int
mimeType        String
fileUrl         String    // Supabase storage URL
bucketName      String

// File metadata
uploadedById    String
schoolId        String?   // For multi-tenant file organization

// File categorization
fileCategory    FileCategory

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// E-commerce Models for Teaching and Learning Materials

model MaterialCategory {
id              String    @id @default(uuid())
name            String
description     String?
imageUrl        String?
isActive        Boolean   @default(true)

// School relationship
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Category relationships
materials       Material[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([schoolId, name])
}

model Material {
id              String    @id @default(uuid())
name            String
description     String?
imageUrls       String[]  // Multiple product images
price           Decimal   @db.Decimal(10, 2)
currency        String    @default("NGN")
stockQuantity   Int       @default(0)
minOrderQty     Int       @default(1)
maxOrderQty     Int?
isActive        Boolean   @default(true)

// Material specifications
brand           String?
model           String?
specifications  Json?     // Store additional specs as JSON

// School and category relationships
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])
categoryId      String
category        MaterialCategory @relation(fields: [categoryId], references: [id])

// E-commerce relationships
orderItems      MaterialOrderItem[]
cartItems       MaterialCartItem[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([schoolId, name])
}

model MaterialCart {
id              String    @id @default(uuid())

// Parent relationship (legacy - keeping for backward compatibility)
parentId        String?
parent          Parent?    @relation(fields: [parentId], references: [id])

// School relationship (cart is school-specific)
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Cart items
items           MaterialCartItem[]

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([parentId, schoolId])
}

model MaterialCartItem {
id              String    @id @default(uuid())
quantity        Int       @default(1)

// Relationships
cartId          String
cart            MaterialCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
materialId      String
material        Material  @relation(fields: [materialId], references: [id])

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt

@@unique([cartId, materialId])
}

model MaterialOrder {
id              String    @id @default(uuid())
orderNumber     String    @unique
status          MaterialOrderStatus @default(PENDING)

// Amounts
subtotal        Decimal   @db.Decimal(10, 2)
processingFee   Decimal   @db.Decimal(10, 2) // Our 2.9% fee
paystackFee     Decimal   @db.Decimal(10, 2) // Paystack's fee
totalAmount     Decimal   @db.Decimal(10, 2) // Total paid by parent
schoolAmount    Decimal   @db.Decimal(10, 2) // Amount school receives

currency        String    @default("NGN")

// Delivery information
deliveryMethod  DeliveryMethod @default(SCHOOL_PICKUP)
deliveryAddress String?
deliveryFee     Decimal?  @db.Decimal(10, 2)
deliveryNotes   String?

// Relationships
parentId        String
parent          Parent    @relation(fields: [parentId], references: [id])
schoolId        String
school          School    @relation(fields: [schoolId], references: [id])

// Order items
items           MaterialOrderItem[]

// Payment information
payment         MaterialPayment?

// Order tracking
orderDate       DateTime  @default(now())
confirmedAt     DateTime?
preparedAt      DateTime?
deliveredAt     DateTime?
cancelledAt     DateTime?

// Notes
orderNotes      String?
adminNotes      String?

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

model MaterialOrderItem {
id              String    @id @default(uuid())
quantity        Int
unitPrice       Decimal   @db.Decimal(10, 2)
totalPrice      Decimal   @db.Decimal(10, 2)

// Relationships
orderId         String
order           MaterialOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)
materialId      String
material        Material  @relation(fields: [materialId], references: [id])

// Snapshot of material details at time of order
materialName    String
materialImage   String?

createdAt       DateTime  @default(now())
}

model MaterialPayment {
id              String    @id @default(uuid())

// Payment details
amount          Decimal   @db.Decimal(10, 2)
currency        String    @default("NGN")
status          MaterialPaymentStatus @default(PENDING)
paymentMethod   String    @default("card")

// Paystack integration
paystackRef     String    @unique
paystackTxnId   String?
authorizationCode String?

// Split payment details
schoolTransferCode String? // Paystack transfer code for school
schoolTransferRef  String? // Our reference for school transfer
schoolTransferStatus String? @default("pending")

// Fee breakdown
processingFee   Decimal   @db.Decimal(10, 2) // Our 2.9%
paystackFee     Decimal   @db.Decimal(10, 2) // Paystack's fee
schoolAmount    Decimal   @db.Decimal(10, 2) // Amount to transfer to school

// Timestamps
paidAt          DateTime?
schoolTransferredAt DateTime?

// Relationships
orderId         String    @unique
order           MaterialOrder @relation(fields: [orderId], references: [id])

// Receipt
receiptNumber   String?   @unique
receiptUrl      String?   // URL to receipt document

// Paystack webhook data
webhookData     Json?

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

model SchoolPaymentAccount {
id              String    @id @default(uuid())

// School relationship
schoolId        String    @unique
school          School    @relation(fields: [schoolId], references: [id])

// Bank account details
accountName     String
accountNumber   String
bankCode        String
bankName        String

// Mobile money details (optional)
momoProvider    String?   // MTN, Airtel, etc.
momoNumber      String?

// Paystack subaccount details
paystackSubaccountCode String? @unique
paystackRecipientCode  String? @unique

// Verification status
isVerified      Boolean   @default(false)
verifiedAt      DateTime?

// Settings
isActive        Boolean   @default(true)
preferredMethod PaymentAccountType @default(BANK_ACCOUNT)

createdAt       DateTime  @default(now())
updatedAt       DateTime  @updatedAt
}

// ORGANIZATIONAL MANAGEMENT MODELS

// Department Model
model Department {
id                String      @id @default(uuid())
name              String
description       String?

// School relationship
schoolId          String
school            School      @relation(fields: [schoolId], references: [id])

// Head of Department (optional)
headOfDepartmentId String?
headOfDepartment  Staff?      @relation("DepartmentHead", fields: [headOfDepartmentId], references: [id])

// Staff members in this department
staffMembers      Staff[]

// Positions within this department
positions         Position[]

createdAt         DateTime    @default(now())
updatedAt         DateTime    @updatedAt

@@unique([schoolId, name])
}

// Position/Designation Model
model Position {
id                String      @id @default(uuid())
title             String
description       String?

// School relationship
schoolId          String
school            School      @relation(fields: [schoolId], references: [id])

// Optional department relationship
departmentId      String?
department        Department? @relation(fields: [departmentId], references: [id])

// Staff members holding this position
staffMembers      Staff[]

createdAt         DateTime    @default(now())
updatedAt         DateTime    @updatedAt

@@unique([schoolId, title])
}

// Generic Staff Model (for non-academic staff or general staff attributes)
model Staff {
id                String        @id @default(uuid())
userId            String        @unique // Link to User
user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

schoolId          String
school            School        @relation(fields: [schoolId], references: [id])

employeeId        String        @unique // Unique identifier for staff within a school
hireDate          DateTime
terminationDate   DateTime?
status            StaffStatus   @default(ACTIVE)
qualifications    String?
bio               String?

// Department and Position relationships
departmentId      String?
department        Department?   @relation(fields: [departmentId], references: [id])
positionId        String?
position          Position?     @relation(fields: [positionId], references: [id])

// Organizational Hierarchy (self-referencing)
reportsToId       String?
reportsTo         Staff?        @relation("StaffHierarchy", fields: [reportsToId], references: [id])
directReports     Staff[]       @relation("StaffHierarchy")

// Head of Department relation
departmentsHeaded Department[]  @relation("DepartmentHead")

// Campus assignment
campusId          String?
campus            Campus?       @relation(fields: [campusId], references: [id])

createdAt         DateTime      @default(now())
updatedAt         DateTime      @updatedAt

@@unique([schoolId, employeeId])
}

// Campus/Branch Management
model Campus {
id                String        @id @default(uuid())
name              String
address           String
city              String
state             String
country           String
postalCode        String?
phone             String?
email             String?

// School relationship
schoolId          String
school            School        @relation(fields: [schoolId], references: [id])

isActive          Boolean       @default(true)

// Entities located at this campus
rooms             Room[]
staff             Staff[]
principals        Principal[]   @relation("PrincipalCampus")
teachers          Teacher[]     @relation("TeacherCampus")
students          Student[]     @relation("StudentCampus")
classes           Class[]       @relation("ClassCampus")
events            Event[]       @relation("EventCampus")
inventoryItems    InventoryItem[] @relation("InventoryLocationCampus")

createdAt         DateTime      @default(now())
updatedAt         DateTime      @updatedAt

@@unique([schoolId, name])
}

// Dynamic Role Creation
model CustomRole {
id                String        @id @default(uuid())
name              String        // e.g., "Librarian", "IT Support"
description       String?

// School relationship (roles are school-specific)
schoolId          String
school            School        @relation(fields: [schoolId], references: [id])

// Granular permissions (JSON object)
permissions       Json?         // e.g., { "canManageLibrary": true, "canAccessIT": true }

// Users assigned to this custom role
users             User[]

createdAt         DateTime      @default(now())
updatedAt         DateTime      @updatedAt

@@unique([schoolId, name])
}

// INVENTORY MANAGEMENT MODELS

// Asset Category for Inventory Items
model AssetCategory {
id                String          @id @default(uuid())
name              String
description       String?
imageUrl          String?
isActive          Boolean         @default(true)

// School relationship
schoolId          String
school            School          @relation(fields: [schoolId], references: [id])

// Inventory items in this category
inventoryItems    InventoryItem[]

createdAt         DateTime        @default(now())
updatedAt         DateTime        @updatedAt

@@unique([schoolId, name])
}

// Inventory Item (e.g., laptops, projectors, lab equipment)
model InventoryItem {
id                  String            @id @default(uuid())
name                String
description         String?
serialNumber        String?           @unique // Unique identifier for the item
assetTag            String?           @unique // School-specific asset tag

purchaseDate        DateTime?
purchasePrice       Decimal?          @db.Decimal(10, 2)
condition           AssetCondition    @default(GOOD)
status              AssetStatus       @default(AVAILABLE)

// School relationship
schoolId            String
school              School            @relation(fields: [schoolId], references: [id])

// Category relationship
categoryId          String
category            AssetCategory     @relation(fields: [categoryId], references: [id])

// Location relationship (can be in a Room or a Campus)
roomId              String?
room                Room?             @relation("InventoryLocationRoom", fields: [roomId], references: [id])
campusId            String?
campus              Campus?           @relation("InventoryLocationCampus", fields: [campusId], references: [id])

// Assignment to a user
assignedToId        String?
assignedTo          User?             @relation("AssignedToUser", fields: [assignedToId], references: [id])
assignedAt          DateTime?

// Maintenance tracking
lastMaintenanceDate DateTime?
nextMaintenanceDate DateTime?
warrantyEndDate     DateTime?
maintenanceRecords  MaintenanceRecord[]

imageUrl            String?           // Image of the item

createdAt           DateTime          @default(now())
updatedAt           DateTime          @updatedAt

@@unique([schoolId, serialNumber], name: "unique_serial_number_per_school")
@@unique([schoolId, assetTag], name: "unique_asset_tag_per_school")
}

// Maintenance Record for Inventory Items
model MaintenanceRecord {
id                String      @id @default(uuid())

// Item being maintained
itemId            String
item              InventoryItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

maintenanceDate   DateTime
description       String?
cost              Decimal?    @db.Decimal(10, 2)

// Who performed the maintenance
performedById     String?
performedBy       User?       @relation("PerformedBy", fields: [performedById], references: [id])

createdAt         DateTime    @default(now())
updatedAt         DateTime    @updatedAt
}

// ACADEMIC MANAGEMENT ENUMS

enum RoomType {
CLASSROOM
LABORATORY
LIBRARY
AUDITORIUM
GYMNASIUM
COMPUTER_LAB
ART_ROOM
MUSIC_ROOM
CAFETERIA
OFFICE
STORAGE
OTHER
}

enum ExamType {
WRITTEN
PRACTICAL
ORAL
PROJECT
CONTINUOUS_ASSESSMENT
FINAL_EXAM
MID_TERM
QUIZ
}

enum ExamStatus {
DRAFT
PUBLISHED
ONGOING
COMPLETED
CANCELLED
}

enum ExamSessionStatus {
SCHEDULED
ONGOING
COMPLETED
CANCELLED
POSTPONED
}

enum HolidayType {
PUBLIC
SCHOOL_SPECIFIC
RELIGIOUS
NATIONAL
REGIONAL
}

enum ObjectiveType {
KNOWLEDGE
SKILL
ATTITUDE
COMPETENCY
}

enum BloomsLevel {
REMEMBER
UNDERSTAND
APPLY
ANALYZE
EVALUATE
CREATE
}

enum ProgressStatus {
NOT_STARTED
IN_PROGRESS
COMPLETED
MASTERED
}

enum MasteryLevel {
BEGINNER
DEVELOPING
PROFICIENT
ADVANCED
EXPERT
}

enum ReportCardStatus {
DRAFT
GENERATED
APPROVED
PUBLISHED
ARCHIVED
}

// Existing enums
enum MaterialOrderStatus {
PENDING
CONFIRMED
PREPARING
READY_FOR_PICKUP
OUT_FOR_DELIVERY
DELIVERED
CANCELLED
REFUNDED
}

enum MaterialPaymentStatus {
PENDING
PROCESSING
COMPLETED
FAILED
REFUNDED
}

enum DeliveryMethod {
SCHOOL_PICKUP
HOME_DELIVERY
STUDENT_PICKUP
}

enum PaymentAccountType {
BANK_ACCOUNT
MOBILE_MONEY
}

enum UserSex {
MALE
FEMALE
OTHER
}

enum ParentRelationship {
MOTHER
FATHER
GUARDIAN
OTHER
}

enum ApprovalStatus {
PENDING
APPROVED
REJECTED
UNDER_REVIEW
}

enum VerificationStatus {
PENDING
VERIFIED
REJECTED
}

enum Day {
MONDAY
TUESDAY
WEDNESDAY
THURSDAY
FRIDAY
SATURDAY
SUNDAY
}

enum CalendarItemType {
HOLIDAY
EXAM_PERIOD
TERM_START
TERM_END
SPECIAL_EVENT
SPORTS_DAY
PARENT_TEACHER_MEETING
OTHER
}

enum AssignmentType {
INDIVIDUAL
GROUP
CLASS_WIDE
}

enum QuestionType {
WRITTEN
MULTIPLE_CHOICE
PRACTICAL
ORAL
PROJECT
}

enum FeeType {
TUITION
REGISTRATION
EXAMINATION
LIBRARY
LABORATORY
SPORTS
TRANSPORT
UNIFORM
BOOKS
EXTRACURRICULAR
OTHER
}

enum PaymentStatus {
PENDING
COMPLETED
FAILED
REFUNDED
CANCELLED
PARTIALLY_PAID
}

enum PaymentMethod {
CREDIT_CARD
DEBIT_CARD
BANK_TRANSFER
MOBILE_MONEY
PAYPAL
STRIPE
FLUTTERWAVE
PAYSTACK
CASH
OTHER
}

enum SubscriptionPlan {
FREE
BASIC
PREMIUM
ENTERPRISE
}

enum ChatType {
DIRECT
GROUP
ANNOUNCEMENT
}

enum MessageType {
TEXT
IMAGE
DOCUMENT
AUDIO
VIDEO
LOCATION
}

enum NotificationType {
ATTENDANCE
ASSIGNMENT
EXAM
RESULT
PAYMENT
ANNOUNCEMENT
EVENT
MESSAGE
APPROVAL
REMINDER
GENERAL
}

enum NotificationPriority {
LOW
NORMAL
HIGH
URGENT
}

enum EventType {
ACADEMIC
SPORTS
CULTURAL
MEETING
EXAMINATION
HOLIDAY
GENERAL
}

enum RSVPResponse {
ATTENDING
NOT_ATTENDING
MAYBE
}

enum AnnouncementPriority {
LOW
NORMAL
HIGH
URGENT
}

enum FeedbackType {
TEACHER_RATING
SCHOOL_RATING
SERVICE_FEEDBACK
SUGGESTION
COMPLAINT
}

enum DeviceType {
IOS
ANDROID
WEB
}

enum FileCategory {
PROFILE_IMAGE
SCHOOL_LOGO
DOCUMENT
ASSIGNMENT
EXAM_QUESTION
RESULT
TIMETABLE
CALENDAR
ANNOUNCEMENT
EVENT_IMAGE
CHAT_ATTACHMENT
RECEIPT
ACCREDITATION
OTHER
}

enum StaffStatus {
ACTIVE
ON_LEAVE
TERMINATED
}

enum AssetCondition {
NEW
USED
DAMAGED
EXCELLENT
GOOD
FAIR
POOR
}

enum AssetStatus {
AVAILABLE
ASSIGNED
IN_REPAIR
DISPOSED
LOST
RETIRED
}
